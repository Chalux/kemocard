
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using Luban;


namespace cfg.config
{
public sealed partial class Card : Luban.BeanBase
{
    public Card(ByteBuf _buf) 
    {
        Id = _buf.ReadString();
        Name = _buf.ReadString();
        Role = (character.Role)_buf.ReadInt();
        Attribute = (pawn.Attribute)_buf.ReadInt();
        Cost = _buf.ReadByte();
        Health = _buf.ReadInt();
        Pdefense = _buf.ReadInt();
        Mdefense = _buf.ReadInt();
        Pattack = _buf.ReadInt();
        Mattack = _buf.ReadInt();
        Heal = _buf.ReadInt();
        {int n0 = System.Math.Min(_buf.ReadSize(), _buf.Size);Tag = new System.Collections.Generic.HashSet<card.Tag>(/*n0 * 3 / 2*/);for(var i0 = 0 ; i0 < n0 ; i0++) { card.Tag _e0;  _e0 = (card.Tag)_buf.ReadInt(); Tag.Add(_e0);}}
        Targettype = (card.TargetType)_buf.ReadInt();
        Icon = _buf.ReadString();
        Sort = _buf.ReadInt();
        Exclusive = _buf.ReadBool();
        Desc = _buf.ReadString();
        Value = _buf.ReadInt();
        HideInDex = _buf.ReadBool();
    }

    public static Card DeserializeCard(ByteBuf _buf)
    {
        return new config.Card(_buf);
    }

    /// <summary>
    /// id
    /// </summary>
    public readonly string Id;
    /// <summary>
    /// 卡名
    /// </summary>
    public readonly string Name;
    /// <summary>
    /// 职能
    /// </summary>
    public readonly character.Role Role;
    /// <summary>
    /// 属性
    /// </summary>
    public readonly pawn.Attribute Attribute;
    /// <summary>
    /// 消耗
    /// </summary>
    public readonly byte Cost;
    /// <summary>
    /// 血量
    /// </summary>
    public readonly int Health;
    /// <summary>
    /// 物理防御
    /// </summary>
    public readonly int Pdefense;
    /// <summary>
    /// 魔法防御
    /// </summary>
    public readonly int Mdefense;
    /// <summary>
    /// 物理攻击
    /// </summary>
    public readonly int Pattack;
    /// <summary>
    /// 魔法攻击
    /// </summary>
    public readonly int Mattack;
    /// <summary>
    /// 回复量
    /// </summary>
    public readonly int Heal;
    /// <summary>
    /// 标签
    /// </summary>
    public readonly System.Collections.Generic.HashSet<card.Tag> Tag;
    /// <summary>
    /// 目标类型
    /// </summary>
    public readonly card.TargetType Targettype;
    /// <summary>
    /// 图标
    /// </summary>
    public readonly string Icon;
    /// <summary>
    /// 优先级
    /// </summary>
    public readonly int Sort;
    /// <summary>
    /// 专属
    /// </summary>
    public readonly bool Exclusive;
    /// <summary>
    /// 描述
    /// </summary>
    public readonly string Desc;
    /// <summary>
    /// 数值（仅展示）
    /// </summary>
    public readonly int Value;
    /// <summary>
    /// 在图鉴中隐藏
    /// </summary>
    public readonly bool HideInDex;
   
    public const int __ID__ = -29204900;
    public override int GetTypeId() => __ID__;

    public  void ResolveRef(Tables tables)
    {
    }

    public override string ToString()
    {
        return "{ "
        + "id:" + Id + ","
        + "name:" + Name + ","
        + "role:" + Role + ","
        + "attribute:" + Attribute + ","
        + "cost:" + Cost + ","
        + "health:" + Health + ","
        + "pdefense:" + Pdefense + ","
        + "mdefense:" + Mdefense + ","
        + "pattack:" + Pattack + ","
        + "mattack:" + Mattack + ","
        + "heal:" + Heal + ","
        + "tag:" + Luban.StringUtil.CollectionToString(Tag) + ","
        + "targettype:" + Targettype + ","
        + "icon:" + Icon + ","
        + "sort:" + Sort + ","
        + "exclusive:" + Exclusive + ","
        + "desc:" + Desc + ","
        + "value:" + Value + ","
        + "hideInDex:" + HideInDex + ","
        + "}";
    }
}

}

